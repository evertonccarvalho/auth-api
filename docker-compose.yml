version: '3'

services:
  db:
    container_name: postgres
    build:
      dockerfile: postgres.dockerfile
      context: ./.docker/development/postgres/
    restart: always
    tty: true
    ports:
      - '${DB_PORT}:${DB_PORT}'
    volumes:
      - .docker/development/postgres/data/${DB_DATABASE_NAME}:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_DATABASE_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', '${DB_USER}', '-d', '${DB_DATABASE_NAME}']
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - public-network

  redis:
    container_name: redis.dev
    image: redis
    volumes:
      - ./.docker/development/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - public-network

  api:
    container_name: api.dev
    build:
      dockerfile: ./.docker/development/api/api-auth-dev.dockerfile
      context: .
    ports:
      - '3000:3000'
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/home/node/app:delegated
      - /home/node/app/node_modules
    environment:
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_DATABASE_NAME=${DB_DATABASE_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PORT=${PORT}
    expose:
      - 3000
    command: npm run start:dev
    networks:
      - public-network

volumes:
  redis_data:
  postgres_data:

networks:
  public-network:
    driver: bridge
